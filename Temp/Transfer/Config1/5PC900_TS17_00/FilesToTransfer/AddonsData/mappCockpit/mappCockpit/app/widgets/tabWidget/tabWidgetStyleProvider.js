define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TabWidgetStyleProvider = /** @class */ (function () {
        function TabWidgetStyleProvider() {
        }
        TabWidgetStyleProvider.getInstance = function () {
            if (!TabWidgetStyleProvider.instance) {
                TabWidgetStyleProvider.instance = new TabWidgetStyleProvider();
                // ... any one time initialization goes here ...
            }
            return TabWidgetStyleProvider.instance;
        };
        TabWidgetStyleProvider.prototype.appendClass = function (className, styleClass) {
            var t = $("head").has("<style> " + styleClass + " </style>");
            if (t) {
                $("head").append("<style> " + styleClass + " </style>");
            }
        };
        //Set Attributes for "our" Components
        TabWidgetStyleProvider.prototype.getTabOverviewDropdownLineStyleClass = function (identifier) {
            var classname = identifier + "_dropdownLineStyle";
            var styleClass = "." + classname + "{ \n                float: right; \n                height: 15px; \n                margin-left: 5px; \n                width: 20px; \n        }";
            this.appendClass(classname, styleClass);
            return classname;
        };
        TabWidgetStyleProvider.prototype.getTabOverviewDropdownCloseAllStyleClass = function (identifier) {
            var classname = identifier + "_dropdownCloseAll";
            var styleClass = "." + classname + "{ \n            background-color: var(--main-black);\n            color: grey;\n            border: 0px;\n            width: 48%;\n        }";
            this.appendClass(classname, styleClass);
            return classname;
        };
        //TODO: migrate to new styling mechanism
        //set CSS-Attributes for SF-Components
        TabWidgetStyleProvider.prototype.getDropdownStyle = function (layoutContainerId) {
            var html = "<style>\n            #" + layoutContainerId + "_dropdown_dropdown {\n                width: 100%;\n                color: var(--main-border-color);\n                background-color: var(--main-black);\n                border-left: var(--main-border-color) solid 2px;\n            }\n\n            #" + layoutContainerId + "_dropdown_dropdown:hover {\n                color:white;\n            }\n            \n            #" + layoutContainerId + "_dropdown_popup ul li{\n                background-color: var(--main-black);\n                color:#AFAFAF;\n            }\n\n            #" + layoutContainerId + "_dropdown_popup ul li:hover{\n                color: white;\n                cursor: pointer;\n            }\n\n            #" + layoutContainerId + "_dropdown_popup ul li Wbutton{\n                background-color: var(--main-black);\n                color: grey;\n                border: 0px; \n                height: 100%;\n                width: 15px; \n            }\n\n            #" + layoutContainerId + "_dropdown_popup ul li button img{\n               width: inherit;\n               height: inherit;\n               -webkit-filter: contrast(0);\n                filter: contrast(0);\n            }\n\n            #" + layoutContainerId + "_dropdown_popup ul li button img:hover{\n                -webkit-filter: contrast(1);\n                filter: contrast(1);\n            }\n            \n        </style>";
            return html;
        };
        TabWidgetStyleProvider.prototype.getLayoutStyleForTabBarDropDown = function (tabBarName) {
            var html = "<style> \n            #" + tabBarName + "_dropdown_closeAll{\n                background-color: var(--main-black);\n                color: grey;\n                border: 0px;\n                width: 48%;\n            }\n            \n            #" + tabBarName + "_dropdown_closeAll:hover{\n                color:white;\n                cursor: pointer;\n            }\n            \n            #" + tabBarName + "_dropdown_closeAllOther{\n                background-color: var(--main-black);\n                color: grey;\n                border: 0px;\n                border-left: 1px grey solid;\n                width: 48%;\n            }\n            \n            #" + tabBarName + "_dropdown_closeAllOther:hover{\n                color:white;\n                cursor: pointer;\n            }\n\n        </style>";
            return html;
        };
        TabWidgetStyleProvider.prototype.setOverviewDropdownMouseOver = function (layoutContainerId) {
            $("#" + layoutContainerId + "_dropdown_popup_list_wrapper_header button").mouseover(function () {
                $(this).css("color", "white");
            }).mouseout(function () {
                $(this).css("color", "grey");
            });
        };
        TabWidgetStyleProvider.prototype.setFlexTabStlye = function (newLayoutElementId) {
            $("#" + newLayoutElementId + "_tag_container").addClass("TabBarTagDropdown");
            $("#" + newLayoutElementId + "_tag_hidden").addClass("TabBarTagDropdown");
            $("#" + newLayoutElementId + "_tag_dropdown").addClass("TabBarTagDropdown");
            $("#" + newLayoutElementId + "_tag_hidden").css("background", "inherit");
            $("#" + newLayoutElementId + "_tag_hidden").css("color", "white");
            $("#" + newLayoutElementId + "_tag_hidden").css("opacity", "1");
            var width = $("#" + newLayoutElementId + "_tag_popup_list_wrapper").css("width");
            $("#" + newLayoutElementId + "_tag_hidden").css("width", width);
            $("#" + newLayoutElementId + "_tag_container").css("background", "inherit");
            $("#" + newLayoutElementId + "_tag_container").css("color", "white");
            $("#" + newLayoutElementId + "_tag_dropdown").css("background", "inherit");
            $("#" + newLayoutElementId + "_tag_dropdown").css("color", "white");
            $("#" + newLayoutElementId + "_tag_dropdown").css("border", "0px");
        };
        TabWidgetStyleProvider.prototype.setFlexTabActiveTabStyle = function (tabName) {
            var element = document.getElementById(tabName);
            if (element != undefined) {
                element.style.display = "block";
            }
            var tabElement = document.getElementById(tabName + "_tab");
            if (tabElement != undefined) {
                tabElement.className += " active";
            }
        };
        TabWidgetStyleProvider.prototype.setFlexTabSelectionDropdownPopupStyle = function (layoutContainerId) {
            $("#" + layoutContainerId + "_dropdown_wrapper").css("float", "right");
            $("#" + layoutContainerId + "_dropdown_container").css("border", "0px");
            $("#" + layoutContainerId + "_dropdown_container").css("margin-right", "3px");
            $("#" + layoutContainerId + "_dropdown_hidden").css("display", "none");
            $("#" + layoutContainerId + "_dropdown_popup_list_wrapper").css("min-width", "280px");
            $("#" + layoutContainerId + "_dropdown_popup_list_wrapper_header").css("height", "30px");
            $("#" + layoutContainerId + "_dropdown_popup_list_wrapper_header").css("background", "var(--main-black)");
            $("#" + layoutContainerId + "_dropdown_popup_list_wrapper_header").css("border-top", "1px gray solid");
            $("#" + layoutContainerId + "_dropdown_popup_list_wrapper_header button").css("width", "49%");
            $("#" + layoutContainerId + "_dropdown_popup_list_wrapper_header button").css("height", "inherit");
            $("#" + layoutContainerId + "_dropdown_popup_list_wrapper_header button").css("background", "var(--main-black)");
            $("#" + layoutContainerId + "_dropdown_popup_list_wrapper_header button").css("border", "0px");
            $("#" + layoutContainerId + "_dropdown_popup_list_wrapper_header button:first-child").css("border-right", "1px grey solid");
            $("#" + layoutContainerId + "_dropdown_popup_list_wrapper_header button").css("color", "grey");
        };
        TabWidgetStyleProvider.prototype.getDropdownButtonStyle = function (buttonId) {
            var style = "\n            <style type=\"text/css\">\n\n            #" + buttonId + "{\n                border: 0px;\n                margin-left:3px;\n            }\n            ." + buttonId + " {\n                background-image: url(\"widgets/tabwidget/style/images/IconBasket_grey.svg\");\n                background-repeat: no-repeat;\n                background-size: 16px 16px;\n                background-color: var(--main-black);\n            }\n\n            ." + buttonId + ":hover {\n                    background-image: url(\"widgets/tabwidget/style/images/IconBasket.svg\");\n            }\n            </style>";
            return style;
        };
        return TabWidgetStyleProvider;
    }());
    exports.TabWidgetStyleProvider = TabWidgetStyleProvider;
});
//# sourceMappingURL=data:application/json;base64,